what is Bash script?

A bash script is a file containing a sequence of commands that are executed by the bash program line by line. It allows you to perform a series of actions, such as navigating to a specific directory, creating a folder, and launching a process using the command line.

By saving these commands in a script, you can repeat the same sequence of steps multiple times and execute them by running the script.

Advantages of Bash scripting:

Bash scripting is a powerful and versatile tool for automating system administration tasks, managing system resources, and performing other routine tasks in Unix/Linux systems. Some advantages of shell scripting are:

Automation: Shell scripts allow you to automate repetitive tasks and processes, saving time and reducing the risk of errors that can occur with manual execution.

Portability: Shell scripts can be run on various platforms and operating systems, including Unix, Linux, macOS, and even Windows through the use of emulators or virtual machines.
Flexibility: Shell scripts are highly customizable and can be easily modified to suit specific requirements. They can also be combined with other programming languages or utilities to create more powerful scripts.

Accessibility: Shell scripts are easy to write and don't require any special tools or software. They can be edited using any text editor, and most operating systems have a built-in shell interpreter.

Integration: Shell scripts can be integrated with other tools and applications, such as databases, web servers, and cloud services, allowing for more complex automation and system management tasks.

Debugging: Shell scripts are easy to debug, and most shells have built-in debugging and error-reporting tools that can help identify and fix issues quickly.

======================

 "shell" is a broad term that refers to any program that provides a command-line interface, 

=================

what is Bash?
BASH(Bourn Again Shell)
based on bourne shell(sh), created by Stephen Bourne in 1979.
"Bash" is a specific type of shell that is widely used in Unix/Linux systems.

Why Bash?
it's rich features.
it fast
it's very comman

what is script?
A shell script is a file containing commands for shell.
Bash script is  simply a file containing commands for the bash shell.

Why script?
scripts allow automation. imagine 20 commands run every week
scripts allow you to automate tasks, save time, increase reliability make you more productive.

Bash shell script having 3 components 
1.shebang
2.commands
3.Eixt statement (0- sucessful 1-255 unsuccessfull)


==========================
shebang:

Bash scripts start with a shebang. Shebang is a combination of bash # and bang ! followed by the 
bash shell path. This is the first line of the script. Shebang tells the shell to execute it via 
bash shell. Shebang is simply an absolute path to the bash interpreter.

Below is an example of the shebang statement.

#!/bin/bash




 Reserved Exit Codes

Exit Code Number	Meaning	Example	Comments
1	Catchall for general errors	let "var1 = 1/0"	Miscellaneous errors, such as "divide by zero" and other impermissible operations
2	Misuse of shell builtins (according to Bash documentation)	empty_function() {}	Missing keyword or command, or permission problem (and diff return code on a failed binary file comparison).
126	Command invoked cannot execute	/dev/null	Permission problem or command is not an executable
127	"command not found"	illegal_command	Possible problem with $PATH or a typo
128	Invalid argument to exit	exit 3.14159	exit takes only integer args in the range 0 - 255 (see first footnote)
128+n	Fatal error signal "n"	kill -9 $PPID of script	$? returns 137 (128 + 9)
130	Script terminated by Control-C	Ctl-C	Control-C is fatal error signal 2, (130 = 128 + 2, see above)
255*	Exit status out of range	exit -1	exit takes only integer args in the range 0 - 255
=======================

Variables:


=======================
  1 #!/bin/bash
  2 echo "Today is " `date`
  3
  4 echo -e "\nenter the path to directory"
  5 read the_path
  6
  7 echo -e "\n you path has the following files and folders: "
  8 ls $the_path
Line #1: The shebang (#!/bin/bash) points toward the bash shell path.
Line #2: The echo command is displaying the current date and time on the terminal. Note that the date is in backticks.
Line #4: We want the user to enter a valid path.
Line #5: The read command reads the input and stores it in the variable the_path.
line #8: The ls command takes the variable with the stored path and displays the current files and folders.

=============================
Variable naming conventions
In Bash scripting, the following are the variable naming conventions:

Variable names should start with a letter or an underscore (_).
Variable names can contain letters, numbers, and underscores (_).
Variable names are case-sensitive.
Variable names should not contain spaces or special characters.
Use descriptive names that reflect the purpose of the variable.
Avoid using reserved keywords, such as if, then, else, fi, and so on as variable names.
Here are some examples of valid variable names in Bash:

name
count
_var
myVar
MY_VAR
And here are some examples of invalid variable names:

2ndvar (variable name starts with a number)
my var (variable name contains a space)
my-var (variable name contains a hyphen)
Following these naming conventions helps make Bash scripts more readable and easier to maintain.

Input and output in Bash scripts
Gathering input
In this section, we'll discuss some methods to provide input to our scripts.

Reading the user input and storing it in a variable
We can read the user input using the read command.

#!/bin/bash
echo "Today is " `date`

echo -e "\nenter the path to directory"
read the_path

echo -e "\nyour path has the following files and folders: "
ls $the_path


VAR=$(date)


=====================


#!/bin/bash
while read -p "What file do you want to test? " filename do
if [ ! -e "$filename" ]; then
echo "The file does not exist."
continue fi
# Okay, the file exists.
ls -ld "$filename"
if [ -r "$filename" ]; then
echo "$filename is readable." fi
if [ -w "$filename" ]; then echo "$filename is writeable"
fi
if [ -x "$filename" ]; then
echo "$filename is executable" fi
done

